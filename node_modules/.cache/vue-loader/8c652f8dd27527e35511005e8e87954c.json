{"remainingRequest":"/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jake/Desktop/spaceX/src/components/shared/shared_Countdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Jake/Desktop/spaceX/src/components/shared/shared_Countdown.vue","mtime":1552068788997},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vuetify-loader/lib/loader.js","mtime":1548745995000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"countdown\",\n    props: [\"nextLaunchDate\"],\n    methods: {\n        getLaunchDate() {\n            return this.$store.state.launches.filter(launches => launches.upcoming == true)[0].launch_date_utc\n        },\n        createCountdownClock() {\n            setTimeout(() => {\n                let countDownDate = new Date(this.getLaunchDate()).getTime();\n                let x = setInterval(function () {\n                    let now = new Date().getTime();\n                    let distance = countDownDate - now;\n                    let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n                    document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" +\n                        minutes + \"m \" + seconds + \"s \";\n                    if (distance < 0) {\n                        clearInterval(x);\n                        document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n                    }\n                }, 1000);\n            }, 1000)\n        },\n    },\n}\n",{"version":3,"sources":["shared_Countdown.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"shared_Countdown.vue","sourceRoot":"src/components/shared","sourcesContent":["<template>\n<div class=\"countdownContainer\">\n<h3 class=\"countdownMargin\">Next Launch :</h3>\n<h3 class=\"countdownMargin\" id=\"countdown\"></h3>\n</div>\n</template>\n\n<script>\nexport default {\n    name: \"countdown\",\n    props: [\"nextLaunchDate\"],\n    methods: {\n        getLaunchDate() {\n            return this.$store.state.launches.filter(launches => launches.upcoming == true)[0].launch_date_utc\n        },\n        createCountdownClock() {\n            setTimeout(() => {\n                let countDownDate = new Date(this.getLaunchDate()).getTime();\n                let x = setInterval(function () {\n                    let now = new Date().getTime();\n                    let distance = countDownDate - now;\n                    let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n                    document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" +\n                        minutes + \"m \" + seconds + \"s \";\n                    if (distance < 0) {\n                        clearInterval(x);\n                        document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n                    }\n                }, 1000);\n            }, 1000)\n        },\n    },\n}\n</script>\n\n<style>\n.countdownContainer{\n    display: flex;\n    justify-content: flex-start;\n    margin: 0px 30px 10px 0px;\n    position:absolute;\n    bottom:0;\n    right:0;\n}\n\n.countdownMargin{\n    width: 150px\n}\n</style>\n\n"]}]}