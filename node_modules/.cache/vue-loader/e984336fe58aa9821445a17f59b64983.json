{"remainingRequest":"/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jake/Desktop/spaceX/src/components/shared/shared_countdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Jake/Desktop/spaceX/src/components/shared/shared_countdown.vue","mtime":1553646191922},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vuetify-loader/lib/loader.js","mtime":1548745995000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"countdown\",\n    props: [\"nextLaunchDate\"],\n    data() {\n        return {\n            days: undefined,\n            hours: undefined,\n            minutes: undefined,\n            seconds: undefined,\n        };\n    },\n    methods: {\n        getLaunchDate() {\n            return this.$store.state.launchesData.filter(launches => launches.upcoming == true)[0].launch_date_utc\n        },\n        createCountdownClock() {\n            let countDownDate = new Date(this.getLaunchDate()).getTime();\n            let x = setInterval(function () {\n                let now = new Date().getTime();\n                let distance = countDownDate - now;\n                this.days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                this.hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                this.minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                this.seconds = Math.floor((distance % (1000 * 60)) / 1000);\n                document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" +\n                    minutes + \"m \" + seconds + \"s \";\n                if (distance < 0) {\n                    clearInterval(x);\n                    document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n                }\n            }, 1000);\n        },\n        convertUnix(unix) {\n            var a = new Date(unix * 1000);\n            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            var year = a.getFullYear();\n            var month = months[a.getMonth()];\n            var date = a.getDate();\n            var hour = a.getHours();\n            var min = a.getMinutes();\n            var sec = a.getSeconds();\n            var time = date + ' ' + month + ' ' + year + ' ';\n            return time;\n        }\n    },\n    mounted() {\n        // this.createCountdownClock()\n    }\n}\n",{"version":3,"sources":["shared_countdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"shared_countdown.vue","sourceRoot":"src/components/shared","sourcesContent":["<template>\n    <div class=\"componentContainerCountdown\">\n        <div class=\"countdownItemContainer\">\n            <h3>Mission Name:</h3>\n            <h2>\n                {{this.$store.state.launchesData.filter(launches => launches.upcoming == true)[0].mission_name}}\n            </h2>\n        </div>\n        <div class=\"countdownItemContainer\">\n            <h3>Launch Date:</h3>\n            <h2>\n                {{this.convertUnix(this.$store.state.launchesData.filter(launches => launches.upcoming == true)[0].launch_date_unix)}}\n            </h2>\n        </div>\n        <div class=\"countdownItemContainerClock\">\n            <h3>T-</h3>\n            <h2 id=\"countdown\"></h2>\n        </div>\n        <div class=\"countdownItemContainer\">\n            <h3>Location:</h3>\n            <h2>\n                {{this.$store.state.launchesData.filter(launches => launches.upcoming == true)[0].launch_site.site_name_long}}\n            </h2>\n        </div>\n    </div>\n</template>\n<script>\nexport default {\n    name: \"countdown\",\n    props: [\"nextLaunchDate\"],\n    data() {\n        return {\n            days: undefined,\n            hours: undefined,\n            minutes: undefined,\n            seconds: undefined,\n        };\n    },\n    methods: {\n        getLaunchDate() {\n            return this.$store.state.launchesData.filter(launches => launches.upcoming == true)[0].launch_date_utc\n        },\n        createCountdownClock() {\n            let countDownDate = new Date(this.getLaunchDate()).getTime();\n            let x = setInterval(function () {\n                let now = new Date().getTime();\n                let distance = countDownDate - now;\n                this.days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                this.hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                this.minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                this.seconds = Math.floor((distance % (1000 * 60)) / 1000);\n                document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" +\n                    minutes + \"m \" + seconds + \"s \";\n                if (distance < 0) {\n                    clearInterval(x);\n                    document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n                }\n            }, 1000);\n        },\n        convertUnix(unix) {\n            var a = new Date(unix * 1000);\n            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            var year = a.getFullYear();\n            var month = months[a.getMonth()];\n            var date = a.getDate();\n            var hour = a.getHours();\n            var min = a.getMinutes();\n            var sec = a.getSeconds();\n            var time = date + ' ' + month + ' ' + year + ' ';\n            return time;\n        }\n    },\n    mounted() {\n        // this.createCountdownClock()\n    }\n}\n</script>\n\n<style>\n.countdownItemContainer{\n    margin: 15px;\n    word-wrap: unset\n}\n.countdownItemContainerClock{\n    margin: 15px;\n    word-wrap: unset;\n    width: 200px\n}\n.componentContainerCountdown {\n    margin: 10px;\n    width: 100%;\n    background-color: var(--utlitybarcolor);\n    border-radius: 7px;\n    padding: 0px 10px 0px 10px;\n    border: 1px;\n    border-style: solid;\n    display: flex;\n    justify-content:space-around\n}\n</style>\n\n"]}]}