{"remainingRequest":"/Users/Jake/Desktop/spaceX/node_modules/babel-loader/lib/index.js!/Users/Jake/Desktop/spaceX/node_modules/vuetify-loader/lib/loader.js!/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jake/Desktop/spaceX/src/components/shared/shared_Countdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Jake/Desktop/spaceX/src/components/shared/shared_Countdown.vue","mtime":1552068788997},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vuetify-loader/lib/loader.js","mtime":1548745995000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jake/Desktop/spaceX/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"countdown\",\n  props: [\"nextLaunchDate\"],\n  methods: {\n    getLaunchDate: function getLaunchDate() {\n      return this.$store.state.launches.filter(function (launches) {\n        return launches.upcoming == true;\n      })[0].launch_date_utc;\n    },\n    createCountdownClock: function createCountdownClock() {\n      var _this = this;\n\n      setTimeout(function () {\n        var countDownDate = new Date(_this.getLaunchDate()).getTime();\n        var x = setInterval(function () {\n          var now = new Date().getTime();\n          var distance = countDownDate - now;\n          var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n          var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n          var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n          var seconds = Math.floor(distance % (1000 * 60) / 1000);\n          document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \";\n\n          if (distance < 0) {\n            clearInterval(x);\n            document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n          }\n        }, 1000);\n      }, 1000);\n    }\n  }\n};",{"version":3,"sources":["shared_Countdown.vue"],"names":[],"mappings":";;;;;;;AAQA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,KAAA,EAAA,CAAA,gBAAA,CAFA;AAGA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,UAAA,QAAA;AAAA,eAAA,QAAA,CAAA,QAAA,IAAA,IAAA;AAAA,OAAA,EAAA,CAAA,EAAA,eAAA;AACA,KAHA;AAIA,IAAA,oBAJA,kCAIA;AAAA;;AACA,MAAA,UAAA,CAAA,YAAA;AACA,YAAA,aAAA,GAAA,IAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,EAAA,OAAA,EAAA;AACA,YAAA,CAAA,GAAA,WAAA,CAAA,YAAA;AACA,cAAA,GAAA,GAAA,IAAA,IAAA,GAAA,OAAA,EAAA;AACA,cAAA,QAAA,GAAA,aAAA,GAAA,GAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,IAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,CAAA;AACA,cAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,IAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,IAAA,OAAA,EAAA,GAAA,EAAA,CAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,IAAA,OAAA,EAAA,GAAA,EAAA,CAAA,IAAA,OAAA,EAAA,CAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,IAAA,OAAA,EAAA,CAAA,GAAA,IAAA,CAAA;AACA,UAAA,QAAA,CAAA,cAAA,CAAA,WAAA,EAAA,SAAA,GAAA,IAAA,GAAA,IAAA,GAAA,KAAA,GAAA,IAAA,GACA,OADA,GACA,IADA,GACA,OADA,GACA,IADA;;AAEA,cAAA,QAAA,GAAA,CAAA,EAAA;AACA,YAAA,aAAA,CAAA,CAAA,CAAA;AACA,YAAA,QAAA,CAAA,cAAA,CAAA,WAAA,EAAA,SAAA,GAAA,SAAA;AACA;AACA,SAbA,EAaA,IAbA,CAAA;AAcA,OAhBA,EAgBA,IAhBA,CAAA;AAiBA;AAtBA;AAHA,CAAA","sourcesContent":["<template>\n<div class=\"countdownContainer\">\n<h3 class=\"countdownMargin\">Next Launch :</h3>\n<h3 class=\"countdownMargin\" id=\"countdown\"></h3>\n</div>\n</template>\n\n<script>\nexport default {\n    name: \"countdown\",\n    props: [\"nextLaunchDate\"],\n    methods: {\n        getLaunchDate() {\n            return this.$store.state.launches.filter(launches => launches.upcoming == true)[0].launch_date_utc\n        },\n        createCountdownClock() {\n            setTimeout(() => {\n                let countDownDate = new Date(this.getLaunchDate()).getTime();\n                let x = setInterval(function () {\n                    let now = new Date().getTime();\n                    let distance = countDownDate - now;\n                    let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n                    document.getElementById(\"countdown\").innerHTML = days + \"d \" + hours + \"h \" +\n                        minutes + \"m \" + seconds + \"s \";\n                    if (distance < 0) {\n                        clearInterval(x);\n                        document.getElementById(\"countdown\").innerHTML = \"EXPIRED\";\n                    }\n                }, 1000);\n            }, 1000)\n        },\n    },\n}\n</script>\n\n<style>\n.countdownContainer{\n    display: flex;\n    justify-content: flex-start;\n    margin: 0px 30px 10px 0px;\n    position:absolute;\n    bottom:0;\n    right:0;\n}\n\n.countdownMargin{\n    width: 150px\n}\n</style>\n\n"],"sourceRoot":"src/components/shared"}]}